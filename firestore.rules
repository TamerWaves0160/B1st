// BehaviorFirst â€” owner-only (simplified)
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function signedIn() { return request.auth != null; }
    function isOwner(uid) { return signedIn() && request.auth.uid == uid; }

    match /behavior_events/{docId} {
      allow create: if signedIn()
        && request.resource.data.uid == request.auth.uid
        && request.resource.data.keys().hasAll(['uid', 'studentId', 'studentName', 'behaviorType', 'severity', 'intensity'])
        && request.resource.data.severity in ['Mild','Moderate','Severe']
        && request.resource.data.intensity is int
        && request.resource.data.intensity >= 1
        && request.resource.data.intensity <= 5;
      allow read, update, delete: if isOwner(resource.data.uid);
    }

    match /students/{sid} {
      allow create: if signedIn()
        && request.resource.data.ownerUid == request.auth.uid
        && request.resource.data.name is string;
      allow read, update, delete: if isOwner(resource.data.ownerUid);
    }

    match /ai_reports/{reportId} {
      allow create: if signedIn()
        && request.resource.data.ownerUid == request.auth.uid
        && request.resource.data.reportType in ['FBA', 'BIP']
        && request.resource.data.studentId is string
        && request.resource.data.studentName is string;
      allow read, update, delete: if isOwner(resource.data.ownerUid);
    }

    match /data_requests/{requestId} {
      allow create: if signedIn()
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.userEmail is string
        && request.resource.data.dataFormat is string
        && request.resource.data.timeframe is string;
      allow read, update, delete: if isOwner(resource.data.userId);
    }
  }
}